name: 🔒 Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # 🔍 Python Security Scanning
  python-security:
    name: 🐍 Python Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt') }}
        
    - name: 📥 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: 🔍 Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true
        
    - name: 🛡️ Check for Known Vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
        
    - name: 🔎 Run Semgrep Security Analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto . || true
        
    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          
  # 🐳 Docker Security Scanning
  docker-security:
    name: 🐳 Docker Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🏗️ Build Docker Image
      run: |
        docker build -t space-intelligence:security-test .
        
    - name: 🔍 Run Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'space-intelligence:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  # 🔐 Secrets Scanning
  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 TruffleHog Secrets Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
  # 📋 License Compliance
  license-check:
    name: 📋 License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📥 Install License Checker
      run: |
        pip install pip-licenses licensecheck
        
    - name: 🔍 Check Python Licenses
      run: |
        pip install -r requirements.txt
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=plain-vertical
        
    - name: 📊 Upload License Report
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: python-licenses.json
        
  # 🚨 Security Summary
  security-summary:
    name: 🚨 Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, docker-security, secrets-scan, license-check]
    if: always()
    
    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Security Reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        path: ./reports/
        
    - name: 📥 Download License Reports
      uses: actions/download-artifact@v3
      with:
        name: license-reports
        path: ./reports/
        
    - name: 🔍 Generate Security Summary
      run: |
        echo "## 🔒 Security Scan Summary" > security-summary.md
        echo "**Scan Date:** $(date)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Python Security Results
        echo "### 🐍 Python Security Analysis" >> security-summary.md
        if [ -f "./reports/bandit-report.json" ]; then
          BANDIT_ISSUES=$(jq '.results | length' ./reports/bandit-report.json || echo "0")
          echo "- **Bandit Issues:** $BANDIT_ISSUES" >> security-summary.md
        fi
        
        if [ -f "./reports/safety-report.json" ]; then
          SAFETY_ISSUES=$(jq '.vulnerabilities | length' ./reports/safety-report.json || echo "0")
          echo "- **Safety Vulnerabilities:** $SAFETY_ISSUES" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        # License Compliance
        echo "### 📋 License Compliance" >> security-summary.md
        if [ -f "./reports/python-licenses.json" ]; then
          LICENSE_COUNT=$(jq 'length' ./reports/python-licenses.json || echo "0")
          echo "- **Total Licenses:** $LICENSE_COUNT" >> security-summary.md
        fi
        echo "" >> security-summary.md
        
        # Recommendations
        echo "### 🔧 Recommendations" >> security-summary.md
        echo "1. Review all HIGH and MEDIUM severity findings" >> security-summary.md
        echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
        echo "3. Ensure no secrets are committed to the repository" >> security-summary.md
        echo "4. Verify license compatibility for all dependencies" >> security-summary.md
        
        cat security-summary.md
        
    - name: 📊 Upload Security Summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        
    - name: 💬 Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
          
  # 🚨 Security Alert on Failure
  security-alert:
    name: 🚨 Security Alert
    runs-on: ubuntu-latest
    needs: [python-security, docker-security, secrets-scan]
    if: failure()
    
    steps:
    - name: 🚨 Send Security Alert
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          🚨 SECURITY ALERT: Critical security issues detected in Space Intelligence Platform!
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          
          Please review the security scan results immediately.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: 📧 Email Security Team
      if: env.SECURITY_EMAIL
      run: |
        echo "Security scan failed for commit ${{ github.sha }}" | \
        mail -s "🚨 SECURITY ALERT: Space Intelligence Platform" ${{ env.SECURITY_EMAIL }}
      env:
        SECURITY_EMAIL: ${{ secrets.SECURITY_EMAIL }}